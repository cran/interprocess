// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// rcpp_hash
std::size_t rcpp_hash(std::string str);
RcppExport SEXP _interprocess_rcpp_hash(SEXP strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type str(strSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_hash(str));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_mutex_create_only
void rcpp_mutex_create_only(std::string name);
RcppExport SEXP _interprocess_rcpp_mutex_create_only(SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    rcpp_mutex_create_only(name);
    return R_NilValue;
END_RCPP
}
// rcpp_mutex_open_only
void rcpp_mutex_open_only(std::string name);
RcppExport SEXP _interprocess_rcpp_mutex_open_only(SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    rcpp_mutex_open_only(name);
    return R_NilValue;
END_RCPP
}
// rcpp_mutex_open_create
void rcpp_mutex_open_create(std::string name);
RcppExport SEXP _interprocess_rcpp_mutex_open_create(SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    rcpp_mutex_open_create(name);
    return R_NilValue;
END_RCPP
}
// rcpp_mutex_remove
bool rcpp_mutex_remove(std::string name);
RcppExport SEXP _interprocess_rcpp_mutex_remove(SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_mutex_remove(name));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_mutex_lock
bool rcpp_mutex_lock(std::string name);
RcppExport SEXP _interprocess_rcpp_mutex_lock(SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_mutex_lock(name));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_mutex_try_lock
bool rcpp_mutex_try_lock(std::string name);
RcppExport SEXP _interprocess_rcpp_mutex_try_lock(SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_mutex_try_lock(name));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_mutex_timed_lock
bool rcpp_mutex_timed_lock(std::string name, long timeout_ms);
RcppExport SEXP _interprocess_rcpp_mutex_timed_lock(SEXP nameSEXP, SEXP timeout_msSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    Rcpp::traits::input_parameter< long >::type timeout_ms(timeout_msSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_mutex_timed_lock(name, timeout_ms));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_mutex_unlock
bool rcpp_mutex_unlock(std::string name);
RcppExport SEXP _interprocess_rcpp_mutex_unlock(SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_mutex_unlock(name));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_mutex_lock_sharable
bool rcpp_mutex_lock_sharable(std::string name);
RcppExport SEXP _interprocess_rcpp_mutex_lock_sharable(SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_mutex_lock_sharable(name));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_mutex_try_lock_sharable
bool rcpp_mutex_try_lock_sharable(std::string name);
RcppExport SEXP _interprocess_rcpp_mutex_try_lock_sharable(SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_mutex_try_lock_sharable(name));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_mutex_timed_lock_sharable
bool rcpp_mutex_timed_lock_sharable(std::string name, long timeout_ms);
RcppExport SEXP _interprocess_rcpp_mutex_timed_lock_sharable(SEXP nameSEXP, SEXP timeout_msSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    Rcpp::traits::input_parameter< long >::type timeout_ms(timeout_msSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_mutex_timed_lock_sharable(name, timeout_ms));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_mutex_unlock_sharable
bool rcpp_mutex_unlock_sharable(std::string name);
RcppExport SEXP _interprocess_rcpp_mutex_unlock_sharable(SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_mutex_unlock_sharable(name));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_queue_create_only
void rcpp_queue_create_only(std::string name, size_t max_num_msg, size_t max_msg_size);
RcppExport SEXP _interprocess_rcpp_queue_create_only(SEXP nameSEXP, SEXP max_num_msgSEXP, SEXP max_msg_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    Rcpp::traits::input_parameter< size_t >::type max_num_msg(max_num_msgSEXP);
    Rcpp::traits::input_parameter< size_t >::type max_msg_size(max_msg_sizeSEXP);
    rcpp_queue_create_only(name, max_num_msg, max_msg_size);
    return R_NilValue;
END_RCPP
}
// rcpp_queue_open_only
void rcpp_queue_open_only(std::string name);
RcppExport SEXP _interprocess_rcpp_queue_open_only(SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    rcpp_queue_open_only(name);
    return R_NilValue;
END_RCPP
}
// rcpp_queue_open_create
void rcpp_queue_open_create(std::string name, size_t max_num_msg, size_t max_msg_size);
RcppExport SEXP _interprocess_rcpp_queue_open_create(SEXP nameSEXP, SEXP max_num_msgSEXP, SEXP max_msg_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    Rcpp::traits::input_parameter< size_t >::type max_num_msg(max_num_msgSEXP);
    Rcpp::traits::input_parameter< size_t >::type max_msg_size(max_msg_sizeSEXP);
    rcpp_queue_open_create(name, max_num_msg, max_msg_size);
    return R_NilValue;
END_RCPP
}
// rcpp_queue_send
bool rcpp_queue_send(std::string name, std::string msg, unsigned int priority);
RcppExport SEXP _interprocess_rcpp_queue_send(SEXP nameSEXP, SEXP msgSEXP, SEXP prioritySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    Rcpp::traits::input_parameter< std::string >::type msg(msgSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type priority(prioritySEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_queue_send(name, msg, priority));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_queue_try_send
bool rcpp_queue_try_send(std::string name, std::string msg, unsigned int priority);
RcppExport SEXP _interprocess_rcpp_queue_try_send(SEXP nameSEXP, SEXP msgSEXP, SEXP prioritySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    Rcpp::traits::input_parameter< std::string >::type msg(msgSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type priority(prioritySEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_queue_try_send(name, msg, priority));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_queue_timed_send
bool rcpp_queue_timed_send(std::string name, std::string msg, unsigned int priority, long timeout_ms);
RcppExport SEXP _interprocess_rcpp_queue_timed_send(SEXP nameSEXP, SEXP msgSEXP, SEXP prioritySEXP, SEXP timeout_msSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    Rcpp::traits::input_parameter< std::string >::type msg(msgSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type priority(prioritySEXP);
    Rcpp::traits::input_parameter< long >::type timeout_ms(timeout_msSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_queue_timed_send(name, msg, priority, timeout_ms));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_queue_receive
Rcpp::String rcpp_queue_receive(std::string name);
RcppExport SEXP _interprocess_rcpp_queue_receive(SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_queue_receive(name));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_queue_try_receive
Rcpp::String rcpp_queue_try_receive(std::string name);
RcppExport SEXP _interprocess_rcpp_queue_try_receive(SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_queue_try_receive(name));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_queue_timed_receive
Rcpp::String rcpp_queue_timed_receive(std::string name, long timeout_ms);
RcppExport SEXP _interprocess_rcpp_queue_timed_receive(SEXP nameSEXP, SEXP timeout_msSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    Rcpp::traits::input_parameter< long >::type timeout_ms(timeout_msSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_queue_timed_receive(name, timeout_ms));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_queue_get_max_msg
std::size_t rcpp_queue_get_max_msg(std::string name);
RcppExport SEXP _interprocess_rcpp_queue_get_max_msg(SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_queue_get_max_msg(name));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_queue_get_max_msg_size
std::size_t rcpp_queue_get_max_msg_size(std::string name);
RcppExport SEXP _interprocess_rcpp_queue_get_max_msg_size(SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_queue_get_max_msg_size(name));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_queue_get_num_msg
std::size_t rcpp_queue_get_num_msg(std::string name);
RcppExport SEXP _interprocess_rcpp_queue_get_num_msg(SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_queue_get_num_msg(name));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_queue_remove
bool rcpp_queue_remove(std::string name);
RcppExport SEXP _interprocess_rcpp_queue_remove(SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_queue_remove(name));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_sem_create_only
void rcpp_sem_create_only(std::string name, unsigned int initial_count);
RcppExport SEXP _interprocess_rcpp_sem_create_only(SEXP nameSEXP, SEXP initial_countSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type initial_count(initial_countSEXP);
    rcpp_sem_create_only(name, initial_count);
    return R_NilValue;
END_RCPP
}
// rcpp_sem_open_only
void rcpp_sem_open_only(std::string name);
RcppExport SEXP _interprocess_rcpp_sem_open_only(SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    rcpp_sem_open_only(name);
    return R_NilValue;
END_RCPP
}
// rcpp_sem_open_create
void rcpp_sem_open_create(std::string name, unsigned int initial_count);
RcppExport SEXP _interprocess_rcpp_sem_open_create(SEXP nameSEXP, SEXP initial_countSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type initial_count(initial_countSEXP);
    rcpp_sem_open_create(name, initial_count);
    return R_NilValue;
END_RCPP
}
// rcpp_sem_remove
bool rcpp_sem_remove(std::string name);
RcppExport SEXP _interprocess_rcpp_sem_remove(SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_sem_remove(name));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_sem_post
bool rcpp_sem_post(std::string name);
RcppExport SEXP _interprocess_rcpp_sem_post(SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_sem_post(name));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_sem_wait
bool rcpp_sem_wait(std::string name);
RcppExport SEXP _interprocess_rcpp_sem_wait(SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_sem_wait(name));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_sem_try_wait
bool rcpp_sem_try_wait(std::string name);
RcppExport SEXP _interprocess_rcpp_sem_try_wait(SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_sem_try_wait(name));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_sem_timed_wait
bool rcpp_sem_timed_wait(std::string name, long timeout_ms);
RcppExport SEXP _interprocess_rcpp_sem_timed_wait(SEXP nameSEXP, SEXP timeout_msSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    Rcpp::traits::input_parameter< long >::type timeout_ms(timeout_msSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_sem_timed_wait(name, timeout_ms));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_interprocess_rcpp_hash", (DL_FUNC) &_interprocess_rcpp_hash, 1},
    {"_interprocess_rcpp_mutex_create_only", (DL_FUNC) &_interprocess_rcpp_mutex_create_only, 1},
    {"_interprocess_rcpp_mutex_open_only", (DL_FUNC) &_interprocess_rcpp_mutex_open_only, 1},
    {"_interprocess_rcpp_mutex_open_create", (DL_FUNC) &_interprocess_rcpp_mutex_open_create, 1},
    {"_interprocess_rcpp_mutex_remove", (DL_FUNC) &_interprocess_rcpp_mutex_remove, 1},
    {"_interprocess_rcpp_mutex_lock", (DL_FUNC) &_interprocess_rcpp_mutex_lock, 1},
    {"_interprocess_rcpp_mutex_try_lock", (DL_FUNC) &_interprocess_rcpp_mutex_try_lock, 1},
    {"_interprocess_rcpp_mutex_timed_lock", (DL_FUNC) &_interprocess_rcpp_mutex_timed_lock, 2},
    {"_interprocess_rcpp_mutex_unlock", (DL_FUNC) &_interprocess_rcpp_mutex_unlock, 1},
    {"_interprocess_rcpp_mutex_lock_sharable", (DL_FUNC) &_interprocess_rcpp_mutex_lock_sharable, 1},
    {"_interprocess_rcpp_mutex_try_lock_sharable", (DL_FUNC) &_interprocess_rcpp_mutex_try_lock_sharable, 1},
    {"_interprocess_rcpp_mutex_timed_lock_sharable", (DL_FUNC) &_interprocess_rcpp_mutex_timed_lock_sharable, 2},
    {"_interprocess_rcpp_mutex_unlock_sharable", (DL_FUNC) &_interprocess_rcpp_mutex_unlock_sharable, 1},
    {"_interprocess_rcpp_queue_create_only", (DL_FUNC) &_interprocess_rcpp_queue_create_only, 3},
    {"_interprocess_rcpp_queue_open_only", (DL_FUNC) &_interprocess_rcpp_queue_open_only, 1},
    {"_interprocess_rcpp_queue_open_create", (DL_FUNC) &_interprocess_rcpp_queue_open_create, 3},
    {"_interprocess_rcpp_queue_send", (DL_FUNC) &_interprocess_rcpp_queue_send, 3},
    {"_interprocess_rcpp_queue_try_send", (DL_FUNC) &_interprocess_rcpp_queue_try_send, 3},
    {"_interprocess_rcpp_queue_timed_send", (DL_FUNC) &_interprocess_rcpp_queue_timed_send, 4},
    {"_interprocess_rcpp_queue_receive", (DL_FUNC) &_interprocess_rcpp_queue_receive, 1},
    {"_interprocess_rcpp_queue_try_receive", (DL_FUNC) &_interprocess_rcpp_queue_try_receive, 1},
    {"_interprocess_rcpp_queue_timed_receive", (DL_FUNC) &_interprocess_rcpp_queue_timed_receive, 2},
    {"_interprocess_rcpp_queue_get_max_msg", (DL_FUNC) &_interprocess_rcpp_queue_get_max_msg, 1},
    {"_interprocess_rcpp_queue_get_max_msg_size", (DL_FUNC) &_interprocess_rcpp_queue_get_max_msg_size, 1},
    {"_interprocess_rcpp_queue_get_num_msg", (DL_FUNC) &_interprocess_rcpp_queue_get_num_msg, 1},
    {"_interprocess_rcpp_queue_remove", (DL_FUNC) &_interprocess_rcpp_queue_remove, 1},
    {"_interprocess_rcpp_sem_create_only", (DL_FUNC) &_interprocess_rcpp_sem_create_only, 2},
    {"_interprocess_rcpp_sem_open_only", (DL_FUNC) &_interprocess_rcpp_sem_open_only, 1},
    {"_interprocess_rcpp_sem_open_create", (DL_FUNC) &_interprocess_rcpp_sem_open_create, 2},
    {"_interprocess_rcpp_sem_remove", (DL_FUNC) &_interprocess_rcpp_sem_remove, 1},
    {"_interprocess_rcpp_sem_post", (DL_FUNC) &_interprocess_rcpp_sem_post, 1},
    {"_interprocess_rcpp_sem_wait", (DL_FUNC) &_interprocess_rcpp_sem_wait, 1},
    {"_interprocess_rcpp_sem_try_wait", (DL_FUNC) &_interprocess_rcpp_sem_try_wait, 1},
    {"_interprocess_rcpp_sem_timed_wait", (DL_FUNC) &_interprocess_rcpp_sem_timed_wait, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_interprocess(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
