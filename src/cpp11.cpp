// Generated by cpp11: do not edit by hand
// clang-format off


#include "cpp11/declarations.hpp"
#include <R_ext/Visibility.h>

// msg_queue.cpp
void cpp_mq_create_only(std::string name, size_t max_num_msg, size_t max_msg_size);
extern "C" SEXP _interprocess_cpp_mq_create_only(SEXP name, SEXP max_num_msg, SEXP max_msg_size) {
  BEGIN_CPP11
    cpp_mq_create_only(cpp11::as_cpp<cpp11::decay_t<std::string>>(name), cpp11::as_cpp<cpp11::decay_t<size_t>>(max_num_msg), cpp11::as_cpp<cpp11::decay_t<size_t>>(max_msg_size));
    return R_NilValue;
  END_CPP11
}
// msg_queue.cpp
void cpp_mq_open_only(std::string name);
extern "C" SEXP _interprocess_cpp_mq_open_only(SEXP name) {
  BEGIN_CPP11
    cpp_mq_open_only(cpp11::as_cpp<cpp11::decay_t<std::string>>(name));
    return R_NilValue;
  END_CPP11
}
// msg_queue.cpp
void cpp_mq_open_create(std::string name, size_t max_num_msg, size_t max_msg_size);
extern "C" SEXP _interprocess_cpp_mq_open_create(SEXP name, SEXP max_num_msg, SEXP max_msg_size) {
  BEGIN_CPP11
    cpp_mq_open_create(cpp11::as_cpp<cpp11::decay_t<std::string>>(name), cpp11::as_cpp<cpp11::decay_t<size_t>>(max_num_msg), cpp11::as_cpp<cpp11::decay_t<size_t>>(max_msg_size));
    return R_NilValue;
  END_CPP11
}
// msg_queue.cpp
bool cpp_mq_send(std::string name, std::string msg, unsigned int priority);
extern "C" SEXP _interprocess_cpp_mq_send(SEXP name, SEXP msg, SEXP priority) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_mq_send(cpp11::as_cpp<cpp11::decay_t<std::string>>(name), cpp11::as_cpp<cpp11::decay_t<std::string>>(msg), cpp11::as_cpp<cpp11::decay_t<unsigned int>>(priority)));
  END_CPP11
}
// msg_queue.cpp
bool cpp_mq_try_send(std::string name, std::string msg, unsigned int priority);
extern "C" SEXP _interprocess_cpp_mq_try_send(SEXP name, SEXP msg, SEXP priority) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_mq_try_send(cpp11::as_cpp<cpp11::decay_t<std::string>>(name), cpp11::as_cpp<cpp11::decay_t<std::string>>(msg), cpp11::as_cpp<cpp11::decay_t<unsigned int>>(priority)));
  END_CPP11
}
// msg_queue.cpp
bool cpp_mq_timed_send(std::string name, std::string msg, unsigned int priority, long timeout_ms);
extern "C" SEXP _interprocess_cpp_mq_timed_send(SEXP name, SEXP msg, SEXP priority, SEXP timeout_ms) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_mq_timed_send(cpp11::as_cpp<cpp11::decay_t<std::string>>(name), cpp11::as_cpp<cpp11::decay_t<std::string>>(msg), cpp11::as_cpp<cpp11::decay_t<unsigned int>>(priority), cpp11::as_cpp<cpp11::decay_t<long>>(timeout_ms)));
  END_CPP11
}
// msg_queue.cpp
std::string cpp_mq_receive(std::string name);
extern "C" SEXP _interprocess_cpp_mq_receive(SEXP name) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_mq_receive(cpp11::as_cpp<cpp11::decay_t<std::string>>(name)));
  END_CPP11
}
// msg_queue.cpp
SEXP cpp_mq_try_receive(std::string name);
extern "C" SEXP _interprocess_cpp_mq_try_receive(SEXP name) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_mq_try_receive(cpp11::as_cpp<cpp11::decay_t<std::string>>(name)));
  END_CPP11
}
// msg_queue.cpp
SEXP cpp_mq_timed_receive(std::string name, long timeout_ms);
extern "C" SEXP _interprocess_cpp_mq_timed_receive(SEXP name, SEXP timeout_ms) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_mq_timed_receive(cpp11::as_cpp<cpp11::decay_t<std::string>>(name), cpp11::as_cpp<cpp11::decay_t<long>>(timeout_ms)));
  END_CPP11
}
// msg_queue.cpp
std::size_t cpp_mq_get_max_msg(std::string name);
extern "C" SEXP _interprocess_cpp_mq_get_max_msg(SEXP name) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_mq_get_max_msg(cpp11::as_cpp<cpp11::decay_t<std::string>>(name)));
  END_CPP11
}
// msg_queue.cpp
std::size_t cpp_mq_get_max_msg_size(std::string name);
extern "C" SEXP _interprocess_cpp_mq_get_max_msg_size(SEXP name) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_mq_get_max_msg_size(cpp11::as_cpp<cpp11::decay_t<std::string>>(name)));
  END_CPP11
}
// msg_queue.cpp
std::size_t cpp_mq_get_num_msg(std::string name);
extern "C" SEXP _interprocess_cpp_mq_get_num_msg(SEXP name) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_mq_get_num_msg(cpp11::as_cpp<cpp11::decay_t<std::string>>(name)));
  END_CPP11
}
// msg_queue.cpp
bool cpp_mq_remove(std::string name);
extern "C" SEXP _interprocess_cpp_mq_remove(SEXP name) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_mq_remove(cpp11::as_cpp<cpp11::decay_t<std::string>>(name)));
  END_CPP11
}
// mutex.cpp
void cpp_mutex_create_only(std::string name);
extern "C" SEXP _interprocess_cpp_mutex_create_only(SEXP name) {
  BEGIN_CPP11
    cpp_mutex_create_only(cpp11::as_cpp<cpp11::decay_t<std::string>>(name));
    return R_NilValue;
  END_CPP11
}
// mutex.cpp
void cpp_mutex_open_only(std::string name);
extern "C" SEXP _interprocess_cpp_mutex_open_only(SEXP name) {
  BEGIN_CPP11
    cpp_mutex_open_only(cpp11::as_cpp<cpp11::decay_t<std::string>>(name));
    return R_NilValue;
  END_CPP11
}
// mutex.cpp
void cpp_mutex_open_create(std::string name);
extern "C" SEXP _interprocess_cpp_mutex_open_create(SEXP name) {
  BEGIN_CPP11
    cpp_mutex_open_create(cpp11::as_cpp<cpp11::decay_t<std::string>>(name));
    return R_NilValue;
  END_CPP11
}
// mutex.cpp
bool cpp_mutex_remove(std::string name);
extern "C" SEXP _interprocess_cpp_mutex_remove(SEXP name) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_mutex_remove(cpp11::as_cpp<cpp11::decay_t<std::string>>(name)));
  END_CPP11
}
// mutex.cpp
bool cpp_mutex_lock(std::string name);
extern "C" SEXP _interprocess_cpp_mutex_lock(SEXP name) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_mutex_lock(cpp11::as_cpp<cpp11::decay_t<std::string>>(name)));
  END_CPP11
}
// mutex.cpp
bool cpp_mutex_try_lock(std::string name);
extern "C" SEXP _interprocess_cpp_mutex_try_lock(SEXP name) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_mutex_try_lock(cpp11::as_cpp<cpp11::decay_t<std::string>>(name)));
  END_CPP11
}
// mutex.cpp
bool cpp_mutex_timed_lock(std::string name, long timeout_ms);
extern "C" SEXP _interprocess_cpp_mutex_timed_lock(SEXP name, SEXP timeout_ms) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_mutex_timed_lock(cpp11::as_cpp<cpp11::decay_t<std::string>>(name), cpp11::as_cpp<cpp11::decay_t<long>>(timeout_ms)));
  END_CPP11
}
// mutex.cpp
bool cpp_mutex_unlock(std::string name);
extern "C" SEXP _interprocess_cpp_mutex_unlock(SEXP name) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_mutex_unlock(cpp11::as_cpp<cpp11::decay_t<std::string>>(name)));
  END_CPP11
}
// mutex.cpp
bool cpp_mutex_lock_sharable(std::string name);
extern "C" SEXP _interprocess_cpp_mutex_lock_sharable(SEXP name) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_mutex_lock_sharable(cpp11::as_cpp<cpp11::decay_t<std::string>>(name)));
  END_CPP11
}
// mutex.cpp
bool cpp_mutex_try_lock_sharable(std::string name);
extern "C" SEXP _interprocess_cpp_mutex_try_lock_sharable(SEXP name) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_mutex_try_lock_sharable(cpp11::as_cpp<cpp11::decay_t<std::string>>(name)));
  END_CPP11
}
// mutex.cpp
bool cpp_mutex_timed_lock_sharable(std::string name, long timeout_ms);
extern "C" SEXP _interprocess_cpp_mutex_timed_lock_sharable(SEXP name, SEXP timeout_ms) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_mutex_timed_lock_sharable(cpp11::as_cpp<cpp11::decay_t<std::string>>(name), cpp11::as_cpp<cpp11::decay_t<long>>(timeout_ms)));
  END_CPP11
}
// mutex.cpp
bool cpp_mutex_unlock_sharable(std::string name);
extern "C" SEXP _interprocess_cpp_mutex_unlock_sharable(SEXP name) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_mutex_unlock_sharable(cpp11::as_cpp<cpp11::decay_t<std::string>>(name)));
  END_CPP11
}
// semaphore.cpp
void cpp_sem_create_only(std::string name, unsigned int initial_count);
extern "C" SEXP _interprocess_cpp_sem_create_only(SEXP name, SEXP initial_count) {
  BEGIN_CPP11
    cpp_sem_create_only(cpp11::as_cpp<cpp11::decay_t<std::string>>(name), cpp11::as_cpp<cpp11::decay_t<unsigned int>>(initial_count));
    return R_NilValue;
  END_CPP11
}
// semaphore.cpp
void cpp_sem_open_only(std::string name);
extern "C" SEXP _interprocess_cpp_sem_open_only(SEXP name) {
  BEGIN_CPP11
    cpp_sem_open_only(cpp11::as_cpp<cpp11::decay_t<std::string>>(name));
    return R_NilValue;
  END_CPP11
}
// semaphore.cpp
void cpp_sem_open_create(std::string name, unsigned int initial_count);
extern "C" SEXP _interprocess_cpp_sem_open_create(SEXP name, SEXP initial_count) {
  BEGIN_CPP11
    cpp_sem_open_create(cpp11::as_cpp<cpp11::decay_t<std::string>>(name), cpp11::as_cpp<cpp11::decay_t<unsigned int>>(initial_count));
    return R_NilValue;
  END_CPP11
}
// semaphore.cpp
bool cpp_sem_remove(std::string name);
extern "C" SEXP _interprocess_cpp_sem_remove(SEXP name) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_sem_remove(cpp11::as_cpp<cpp11::decay_t<std::string>>(name)));
  END_CPP11
}
// semaphore.cpp
bool cpp_sem_post(std::string name);
extern "C" SEXP _interprocess_cpp_sem_post(SEXP name) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_sem_post(cpp11::as_cpp<cpp11::decay_t<std::string>>(name)));
  END_CPP11
}
// semaphore.cpp
bool cpp_sem_wait(std::string name);
extern "C" SEXP _interprocess_cpp_sem_wait(SEXP name) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_sem_wait(cpp11::as_cpp<cpp11::decay_t<std::string>>(name)));
  END_CPP11
}
// semaphore.cpp
bool cpp_sem_try_wait(std::string name);
extern "C" SEXP _interprocess_cpp_sem_try_wait(SEXP name) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_sem_try_wait(cpp11::as_cpp<cpp11::decay_t<std::string>>(name)));
  END_CPP11
}
// semaphore.cpp
bool cpp_sem_timed_wait(std::string name, long timeout_ms);
extern "C" SEXP _interprocess_cpp_sem_timed_wait(SEXP name, SEXP timeout_ms) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_sem_timed_wait(cpp11::as_cpp<cpp11::decay_t<std::string>>(name), cpp11::as_cpp<cpp11::decay_t<long>>(timeout_ms)));
  END_CPP11
}
// uid.cpp
std::string cpp_base62(uint64_t value, uint64_t hundredth, int bytes);
extern "C" SEXP _interprocess_cpp_base62(SEXP value, SEXP hundredth, SEXP bytes) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_base62(cpp11::as_cpp<cpp11::decay_t<uint64_t>>(value), cpp11::as_cpp<cpp11::decay_t<uint64_t>>(hundredth), cpp11::as_cpp<cpp11::decay_t<int>>(bytes)));
  END_CPP11
}
// uid.cpp
std::string cpp_hash(std::string str);
extern "C" SEXP _interprocess_cpp_hash(SEXP str) {
  BEGIN_CPP11
    return cpp11::as_sexp(cpp_hash(cpp11::as_cpp<cpp11::decay_t<std::string>>(str)));
  END_CPP11
}

extern "C" {
static const R_CallMethodDef CallEntries[] = {
    {"_interprocess_cpp_base62",                    (DL_FUNC) &_interprocess_cpp_base62,                    3},
    {"_interprocess_cpp_hash",                      (DL_FUNC) &_interprocess_cpp_hash,                      1},
    {"_interprocess_cpp_mq_create_only",            (DL_FUNC) &_interprocess_cpp_mq_create_only,            3},
    {"_interprocess_cpp_mq_get_max_msg",            (DL_FUNC) &_interprocess_cpp_mq_get_max_msg,            1},
    {"_interprocess_cpp_mq_get_max_msg_size",       (DL_FUNC) &_interprocess_cpp_mq_get_max_msg_size,       1},
    {"_interprocess_cpp_mq_get_num_msg",            (DL_FUNC) &_interprocess_cpp_mq_get_num_msg,            1},
    {"_interprocess_cpp_mq_open_create",            (DL_FUNC) &_interprocess_cpp_mq_open_create,            3},
    {"_interprocess_cpp_mq_open_only",              (DL_FUNC) &_interprocess_cpp_mq_open_only,              1},
    {"_interprocess_cpp_mq_receive",                (DL_FUNC) &_interprocess_cpp_mq_receive,                1},
    {"_interprocess_cpp_mq_remove",                 (DL_FUNC) &_interprocess_cpp_mq_remove,                 1},
    {"_interprocess_cpp_mq_send",                   (DL_FUNC) &_interprocess_cpp_mq_send,                   3},
    {"_interprocess_cpp_mq_timed_receive",          (DL_FUNC) &_interprocess_cpp_mq_timed_receive,          2},
    {"_interprocess_cpp_mq_timed_send",             (DL_FUNC) &_interprocess_cpp_mq_timed_send,             4},
    {"_interprocess_cpp_mq_try_receive",            (DL_FUNC) &_interprocess_cpp_mq_try_receive,            1},
    {"_interprocess_cpp_mq_try_send",               (DL_FUNC) &_interprocess_cpp_mq_try_send,               3},
    {"_interprocess_cpp_mutex_create_only",         (DL_FUNC) &_interprocess_cpp_mutex_create_only,         1},
    {"_interprocess_cpp_mutex_lock",                (DL_FUNC) &_interprocess_cpp_mutex_lock,                1},
    {"_interprocess_cpp_mutex_lock_sharable",       (DL_FUNC) &_interprocess_cpp_mutex_lock_sharable,       1},
    {"_interprocess_cpp_mutex_open_create",         (DL_FUNC) &_interprocess_cpp_mutex_open_create,         1},
    {"_interprocess_cpp_mutex_open_only",           (DL_FUNC) &_interprocess_cpp_mutex_open_only,           1},
    {"_interprocess_cpp_mutex_remove",              (DL_FUNC) &_interprocess_cpp_mutex_remove,              1},
    {"_interprocess_cpp_mutex_timed_lock",          (DL_FUNC) &_interprocess_cpp_mutex_timed_lock,          2},
    {"_interprocess_cpp_mutex_timed_lock_sharable", (DL_FUNC) &_interprocess_cpp_mutex_timed_lock_sharable, 2},
    {"_interprocess_cpp_mutex_try_lock",            (DL_FUNC) &_interprocess_cpp_mutex_try_lock,            1},
    {"_interprocess_cpp_mutex_try_lock_sharable",   (DL_FUNC) &_interprocess_cpp_mutex_try_lock_sharable,   1},
    {"_interprocess_cpp_mutex_unlock",              (DL_FUNC) &_interprocess_cpp_mutex_unlock,              1},
    {"_interprocess_cpp_mutex_unlock_sharable",     (DL_FUNC) &_interprocess_cpp_mutex_unlock_sharable,     1},
    {"_interprocess_cpp_sem_create_only",           (DL_FUNC) &_interprocess_cpp_sem_create_only,           2},
    {"_interprocess_cpp_sem_open_create",           (DL_FUNC) &_interprocess_cpp_sem_open_create,           2},
    {"_interprocess_cpp_sem_open_only",             (DL_FUNC) &_interprocess_cpp_sem_open_only,             1},
    {"_interprocess_cpp_sem_post",                  (DL_FUNC) &_interprocess_cpp_sem_post,                  1},
    {"_interprocess_cpp_sem_remove",                (DL_FUNC) &_interprocess_cpp_sem_remove,                1},
    {"_interprocess_cpp_sem_timed_wait",            (DL_FUNC) &_interprocess_cpp_sem_timed_wait,            2},
    {"_interprocess_cpp_sem_try_wait",              (DL_FUNC) &_interprocess_cpp_sem_try_wait,              1},
    {"_interprocess_cpp_sem_wait",                  (DL_FUNC) &_interprocess_cpp_sem_wait,                  1},
    {NULL, NULL, 0}
};
}

extern "C" attribute_visible void R_init_interprocess(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
